#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Introduction to Machine Learning (236756) Homework 1
\end_layout

\begin_layout Author
Submitting: Eli Sennesh (337634083) and Matan Nov (308285907)
\end_layout

\begin_layout Section
Question 1
\end_layout

\begin_layout Subsection
What is the cardinality of 
\emph on
H
\emph default
?
\end_layout

\begin_layout Standard
The cardinality of 
\emph on
H
\emph default
 is the number of different ways to choose the 
\emph on
k
\emph default
 points where h
\begin_inset script subscript

\begin_layout Plain Layout
S
\end_layout

\end_inset

returns +1: 
\begin_inset Formula $_{n}P_{k}$
\end_inset

.
\end_layout

\begin_layout Subsection
What is the VC Dimension of 
\emph on
H
\emph default
?
\end_layout

\begin_layout Standard
The VC Dimension of 
\emph on
H
\emph default
 is 
\begin_inset Formula $min(k,\lfloor\frac{n}{2}\rfloor)$
\end_inset

.
\end_layout

\begin_layout Standard
H cannot shatter samples of size greater than 
\begin_inset Formula $k$
\end_inset

, as we cannot assign assign 1 to every point in the sample (since we can
 assign 1 to at most k points).
\end_layout

\begin_layout Standard
H cannot shatter samples of size greater than 
\begin_inset Formula $\lfloor\frac{n}{2}\rfloor$
\end_inset

 (if k is greater than 
\begin_inset Formula $\frac{n}{2}$
\end_inset

), as we cannot assign 0 to every point in the sample (we have to choose
 exactly k different points and there are less than k points in n that aren't
 in the sample).
\end_layout

\begin_layout Standard
We can shatter any sample of size k, if k is at most 
\begin_inset Formula $\frac{n}{2}$
\end_inset

, or 
\begin_inset Formula $\lfloor\frac{n}{2}\rfloor$
\end_inset

 since for an assignment of 1 to 
\begin_inset Formula $m<k$
\end_inset

 points we choose those m points to be in 
\begin_inset Formula $h_{C}$
\end_inset

 and we choose an additional 
\begin_inset Formula $k-m$
\end_inset

 points that are not in C.
\end_layout

\begin_layout Section
Question 2
\end_layout

\begin_layout Subsection
Question 2A
\end_layout

\begin_layout Standard
By the reasoning of the Bias-Complexity Tradeoff, H
\bar under

\begin_inset script subscript

\begin_layout Plain Layout

\bar no
B
\end_layout

\end_inset


\bar default
 is richer, but its decrease in approximation error appears to have given
 us an increase in estimation error -- overfitting.
\end_layout

\begin_layout Subsection
Question 2B
\end_layout

\begin_layout Standard
Suggestions (i) and (iii) can together help Benny improve over Avi's performance.
 (iii) unequivocally helps reduce estimation error, while (i) can help reduce
 approximation error while yielding less overfitting than (ii) or Benny's
 existing hypothesis class.
 (ii) with the same sample size will just increase overfitting even further.
\end_layout

\begin_layout Section
Question 3
\end_layout

\begin_layout Subsection
Question 3A
\end_layout

\begin_layout Standard
Since a partition of V corresponds uniquely to an equivilence relation 
\begin_inset Formula $V\times V\rightarrow\{0,1\}$
\end_inset

, the number of such equivalence relations (
\begin_inset Formula $\mathcal{H}^{n}$
\end_inset

) is exactly the number of possible partitions of a set of size n, which
 is 
\begin_inset Formula $Bell_{n}$
\end_inset

 - the nth Bell number.
\end_layout

\begin_layout Subsection
Question 3B
\end_layout

\begin_layout Standard
The VC-Dimension of 
\begin_inset Formula $\mathcal{H}^{n}$
\end_inset

 is n-1.
\begin_inset Newline newline
\end_inset

We will show that any n points cannot be shattered:
\end_layout

\begin_layout Standard
If any of the points in sample are of the form 
\begin_inset Formula $(v_{1},v_{1})$
\end_inset

 then no equivilence relation can assign 0 to that point (since that would
 violate the property of reflexivity) and we cannot shatter that sample.
\end_layout

\begin_layout Standard
If any two points in the sample are of the form 
\begin_inset Formula $(v_{1},v_{2}),($
\end_inset

v
\begin_inset Formula $_{2},v_{1})$
\end_inset

 then no equivilence relation can assign 0,1 to those points respectively
 (since that would violate the property of symmetry) and we cannot shatter
 that sample.
\end_layout

\begin_layout Standard
For all samples not including points of the form (v,v) or pairs of points
 of the form 
\begin_inset Formula $(v_{1},v_{2}),(v_{2},v_{1})$
\end_inset

:
\end_layout

\begin_layout Standard
Build a directed graph 
\begin_inset Formula $G_{C}=(V_{C},E_{C})$
\end_inset

 such that 
\begin_inset Formula $V_{C}=V$
\end_inset

 and for every point 
\begin_inset Formula $(v_{1},v_{2})$
\end_inset

 in our sample we add an edge 
\begin_inset Formula $(v_{1},v_{2})$
\end_inset

 to 
\begin_inset Formula $E_{C}$
\end_inset

.
\end_layout

\begin_layout Standard
If there is a directed cycle in the graph then H cannot shatter the sample,
 since a directed cycle means a subset of k points in the sample is of the
 form 
\begin_inset Formula $(v_{1},v_{2}),(v_{2},v_{3})...(v_{k},v_{1})$
\end_inset

 in which case no equivilence relations can assign the values (1,1,1..0) to
 those points since that would violate the property of transitivity.
\end_layout

\begin_layout Standard
If we cannot shatter a sample with points 
\begin_inset Formula $(v_{1},v_{2}),(v_{2},v_{3})...(v_{n-1},v_{n})$
\end_inset

 then we can also not shatter any sample with the same points, except that
 any number of them have been transposed (
\begin_inset Formula $(v_{b},v_{a})$
\end_inset

 instead of 
\begin_inset Formula $(v_{a},v_{b})$
\end_inset

), since 
\begin_inset Formula $h(v_{a},v_{b})=h(v_{b},v_{a})$
\end_inset

 for every equivilence relation h, so 
\begin_inset Formula $H_{C}$
\end_inset

 is the same for both samples (and H either shatters both or shatters neither).
\end_layout

\begin_layout Standard
Transposing points is equivilent to reversing directed edges in our graph
 
\begin_inset Formula $G_{C}$
\end_inset

, so if for some choice of directions our graph includes a directed cycle,
 H cannot shatter the sample C.
\end_layout

\begin_layout Standard
If 
\begin_inset Formula $G_{C}'$
\end_inset

, which is 
\begin_inset Formula $G_{C}$
\end_inset

 with undirected edges, includes a simple cycle, then some choice of directions
 for the edges in 
\begin_inset Formula $G_{C}$
\end_inset

 yields a directed cycle, and then H cannot shatter C.
\end_layout

\begin_layout Standard
C includes no points, or pairs of points, that would yield loops or parrelel
 edges, so 
\begin_inset Formula $|E_{C}|=|C|=n$
\end_inset

, therefore it must have a connected component with more edges than vertices
 - this component cannot be a tree (since trees have |E| = |V|-1), therefore
 this component has a cycle - therefore H cannot shatter C.
\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
For 
\begin_inset Formula $V=\{v_{1},v_{2}...v_{n}\}$
\end_inset

, a set of points 
\begin_inset Formula $C=\{(v_{1},v_{2}),(v_{2},v_{3})...(v_{n-1},v_{n})\}$
\end_inset

 of size n-1 can be shattered:
\end_layout

\begin_layout Standard
Every string S of size n-1 over the alphabet {0,1} corresponds uniquely
 to a relation h restricted to C, if the ith letter in S is 1 then 
\begin_inset Formula $h_{C}(v_{i},v_{i+1})=1$
\end_inset

 and 
\begin_inset Formula $h_{C}(v_{i},v_{i+1})=0$
\end_inset

 otherwise.
\end_layout

\begin_layout Standard
If we show that every such relation 
\begin_inset Formula $h_{C}$
\end_inset

 is an equivilence relation, then H shatters C (since 
\begin_inset Formula $|H_{C}|=2^{|C|}$
\end_inset

).
\end_layout

\begin_layout Standard
For a given string S, we can build an equivilence relation 
\begin_inset Formula $h_{S}$
\end_inset

 by making an array of indices of 0s in S, 
\begin_inset Formula $I_{S}=\{i_{1},i_{2}..i_{k}\}$
\end_inset

 and making an equivilency class for every 
\begin_inset Formula $i_{a}$
\end_inset

 that includes the elements 
\begin_inset Formula $v_{x}:i_{a}\leq x<i_{a+1}$
\end_inset

(every element that precedes 
\begin_inset Formula $i_{1}$
\end_inset

 is put into an equivilency class, and every element after 
\begin_inset Formula $i_{k}$
\end_inset

 is put into the same equivilency class as 
\begin_inset Formula $v_{i_{k}}$
\end_inset

).
\end_layout

\begin_layout Standard
This is an equivilence relation 
\begin_inset Formula $V\rightarrow\{0,1\}$
\end_inset

 since it divides all the members of V into disjoint classes, and it maps
 C to S because if 
\begin_inset Formula $S[i]=1$
\end_inset

 then 
\begin_inset Formula $h(v_{i},v_{i+1})=1$
\end_inset

 and if 
\begin_inset Formula $S[i]=0$
\end_inset

 then 
\begin_inset Formula $h(v_{i},v_{i+1})=0$
\end_inset

.
\end_layout

\begin_layout Subsection
Question 3C
\end_layout

\begin_layout Standard
No - 
\begin_inset Formula $\mathcal{H}_{log(n)}^{n}$
\end_inset

 can shatter a set of points C of size n-1:
\end_layout

\begin_layout Standard
\begin_inset Formula $C=\{(v_{1},v_{2}),(v_{1},v_{3})...(v_{1},v_{n})\}$
\end_inset


\end_layout

\begin_layout Standard
For every string S of size n-1 over {0,1} we can build an equivilence relation
 in 
\begin_inset Formula $\mathcal{H}_{log(n)}^{n}$
\end_inset

 such that if S[i]=1 then 
\begin_inset Formula $h(C[i])=1$
\end_inset

 and otherwise 
\begin_inset Formula $h(C[i])=0$
\end_inset

 for all i.
\end_layout

\begin_layout Standard
For a given string S, we build our equivilence relation 
\begin_inset Formula $h_{S}$
\end_inset

 by defining two equivilence classes: 
\begin_inset Formula $e_{1}=\{v_{1}\}\cup\{v_{i+1}|S[i]=1\}$
\end_inset

, 
\begin_inset Formula $e_{0}=\{v_{i}|v_{i}\in V\wedge v_{i}\notin e_{1}\}$
\end_inset

 - 
\begin_inset Formula $h_{S}$
\end_inset

 is an equivilence relation since it divides the elements of V into disjoint
 classes and 
\begin_inset Formula $h_{S}$
\end_inset

 is in 
\begin_inset Formula $\mathcal{H}_{log(n)}^{n}$
\end_inset

 (for all n above some constant such that log(n)>2) since it has at most
 2 equivilency classes.
\end_layout

\begin_layout Section
Question 4
\end_layout

\begin_layout Subsection
Question 4A
\end_layout

\begin_layout Standard
\begin_inset Formula $\tau_{m}(\mathcal{H})\leq\underset{i=1}{\overset{r}{\sum}}\tau_{m}(\mathcal{H}_{i})$
\end_inset

 
\end_layout

\begin_layout Subsection
Question 4B
\end_layout

\begin_layout Standard
For 
\begin_inset Formula $m\leq D+1$
\end_inset


\end_layout

\begin_layout Standard

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\begin_inset Formula $\tau_{m}(\mathcal{H})\leq\underset{i=1}{\overset{r}{\sum}}\underset{j=0}{\overset{D}{\sum}}{m \choose j}=r\underset{j=0}{\overset{D}{\sum}}{m \choose j}$
\end_inset


\end_layout

\begin_layout Standard
Otherwise
\end_layout

\begin_layout Standard
\begin_inset Formula $\tau_{m}(\mathcal{H})\leq\underset{i=1}{\overset{r}{\sum}}(\frac{e\cdot m}{D})^{D}=r\cdot(\frac{e\cdot m}{D})^{D}$
\end_inset


\end_layout

\begin_layout Subsection
Question 4C
\end_layout

\begin_layout Standard
Assume VCDim(
\begin_inset Formula $\mathcal{H}$
\end_inset

) = m, then 
\begin_inset Formula $\tau_{\mathcal{H}}(m)=2^{m}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
2^{m} & \leq & r\cdot(\frac{e\cdot m}{D})^{D}\\
m & \leq & log(r)+Dlog(\frac{m}{D})+Dlog(e)\,\leq log(r)+2Dlog(\frac{m}{D})\\
\frac{m}{D} & \leq & \frac{log(r)}{D}+2log(\frac{m}{D})\\
 & Lemma\, A.2\\
\frac{m}{D} & \leq & 2\frac{log(r)}{D}+4\\
m & \leq & log(r)+Dlog(\frac{m}{D})\leq log(r)+Dlog(2\frac{log(r)}{D}+4)\leq log(r)+2Dlog(\frac{log(r)}{D})
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
Question 4D
\begin_inset Newline newline
\end_inset

We can seperate 
\begin_inset Formula $\mathcal{H}^{(k)}$
\end_inset

 into k concept classes 
\begin_inset Formula $\mathcal{H}_{S}^{(k)}$
\end_inset

 for 
\begin_inset Formula $S\subset[1..d]\wedge|S|=k$
\end_inset

 to be hypothesis classes of half-spaces with vector 
\begin_inset Formula $w\in\mathbb{R}^{d}$
\end_inset

 such that 
\begin_inset Formula $\forall i\notin S:w(i)=0$
\end_inset


\end_layout

\begin_layout Standard
Since 
\begin_inset Formula $H_{S}$
\end_inset

 are k dimensional half-spaces it follows that 
\begin_inset Formula $VCDim(H_{S})\le k$
\end_inset

.
\end_layout

\begin_layout Standard
Also, the number of sets in the union are 
\begin_inset Formula ${d \choose k}$
\end_inset

, therefore:
\begin_inset Formula 
\begin{eqnarray*}
VCDim(\mbox{\mathcal{H}}^{(k)}) & = & O(log({d \choose k})+klog(\frac{log({d \choose k})}{k})\\
VCDim(\mbox{\mathcal{H}}^{(k)}) & = & O(d+klog(\frac{d}{k})=O(klog(\frac{d}{k})
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
Question 4E
\begin_inset Newline newline
\end_inset

Represent every subset 
\begin_inset Formula $X_{i}\subset[1..log(d)](1\leq i\leq d)$
\end_inset

 as a vector 
\begin_inset Formula $v_{X_{i}}(j)=\begin{cases}
1 & j\in X_{i}\\
-1 & j\notin X_{i}
\end{cases}$
\end_inset

 (
\begin_inset Formula $|v_{X_{i}}|=log(d)$
\end_inset

)
\end_layout

\begin_layout Standard
Define a sample of vector 
\begin_inset Formula $C=\{c_{1},c_{2}...c_{log(d)}\}:c_{i}(j)=v_{X_{j}}(i)$
\end_inset


\end_layout

\begin_layout Standard
For any given 
\begin_inset Formula $X_{i}$
\end_inset

, there exists a hypothesis 
\begin_inset Formula $h_{i}\in\mathcal{H}^{(1)}$
\end_inset

 that satisfies
\begin_inset Formula $h_{i}(c_{j})=1\iff j\in X_{i}$
\end_inset


\end_layout

\begin_layout Standard
In particular, the samples that the hypothesis 
\begin_inset Formula $h_{i}(c)=sign(c(i))$
\end_inset

 classifies as 1 is 
\begin_inset Formula $\{c_{j}|c_{j}(i)=1\}=\{c_{j}|V_{X_{i}}(j)=1\}=\{c_{j}|j\in X_{i}\}$
\end_inset

, which means 
\begin_inset Formula $\mathcal{H}^{(1)}$
\end_inset

 shatters an example of size log(d): 
\begin_inset Formula $VCDim(\mathcal{H}^{(1)})\geq log(d)$
\end_inset


\end_layout

\begin_layout Section
Question 5
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def learn_interval(examples):
\end_layout

\begin_layout Plain Layout

  # sorting is O(n*log(n)) 
\end_layout

\begin_layout Plain Layout

  examples.sort_by(lambda ex: ex.x) 
\end_layout

\begin_layout Plain Layout

  # Iterate from leftmost positive to rightmost positive 
\end_layout

\begin_layout Plain Layout

  # filtering is O(n)
\end_layout

\begin_layout Plain Layout

  # zipWithIndex -- first component of the tuple is the example,
\end_layout

\begin_layout Plain Layout

  #   second is the index
\end_layout

\begin_layout Plain Layout

  positives = examples.zipWithIndex.filter(lambda ex: ex[0].y == +1) 
\end_layout

\begin_layout Plain Layout

  positive_indices = positives.map(lambda ex: ex[1]) #mapping is O(n) 
\end_layout

\begin_layout Plain Layout

  positives = positives.map(lambda ex: ex[0]) #still O(n) 
\end_layout

\begin_layout Plain Layout

  # maximally wide interval has maximum error 
\end_layout

\begin_layout Plain Layout

  best_interval = (0, len(examples), 1.0) 
\end_layout

\begin_layout Plain Layout

  # this loop takes time O(n^2): for each inside a for each 
\end_layout

\begin_layout Plain Layout

  for i in range(0, len(positive_indices)): 
\end_layout

\begin_layout Plain Layout

    a = positive_indices[i] 
\end_layout

\begin_layout Plain Layout

    # Iterate from rightmost positive to leftmost positive, one by one.
 
\end_layout

\begin_layout Plain Layout

    for j in range(len(positive_indices) - 1, -1, -1): 
\end_layout

\begin_layout Plain Layout

      b = positive_indices[j] 
\end_layout

\begin_layout Plain Layout

      # the number of negative examples outside our current interval 
\end_layout

\begin_layout Plain Layout

      # these are *correctly* classified 
\end_layout

\begin_layout Plain Layout

      negatives_outside = a + (len(examples) - b) 
\end_layout

\begin_layout Plain Layout

      # how many *positives* are inside the interval? 
\end_layout

\begin_layout Plain Layout

      positives_inside = j - i + 1 
\end_layout

\begin_layout Plain Layout

      # the number of positives *outside* the interval -- ERROR 
\end_layout

\begin_layout Plain Layout

      positives_outside = len(positives) - positives_inside 
\end_layout

\begin_layout Plain Layout

      # how many *negatives* are inside the interval -- ERROR 
\end_layout

\begin_layout Plain Layout

      negatives_inside = (b - a + 1) - positives_inside 
\end_layout

\begin_layout Plain Layout

      error = (positives_outside + negatives_inside) / len(examples) 
\end_layout

\begin_layout Plain Layout

      if error < best_interval[2] then: 
\end_layout

\begin_layout Plain Layout

        best_interval = (a, b, error)
\end_layout

\begin_layout Plain Layout

  #return the tuple components aside from the error counter
\end_layout

\begin_layout Plain Layout

  return (best_interval[0], best_interval[1])
\end_layout

\end_inset


\end_layout

\end_body
\end_document
